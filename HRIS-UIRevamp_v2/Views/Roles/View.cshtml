@model HRIS_UIRevamp_v2.ViewModel.RoleUpdateViewModel

@{
    ViewBag.Title = "Role/View";
}
<div class="col-md-12 title">
    VIEW ROLE
</div>
    <div class="body-content">
        <div class="col-md-12 no-padding">

            <div class="col-md-12 no-padding tabs-default h55 ff-nt2">
                <div class="tab selected flex flex-left">
                    <span class="margin-left-lg fs26">BASIC INFORMATION</span>
                </div>
            </div>

            <div class="col-md-12 no-padding flex flex-center margin-bottom-lg">
                <div class="col-md-5">
                    <div class="col-md-12 margin-top-default">
                        <div class="col-md-12 margin-top-default">
                            <div class="no-padding col-md-12 fs20 ff-nt2">
                                @Html.LabelFor(model => model.comp_id, new { @class = "" })
                            </div>
                            <div class="col-md-12 no-padding">
                               @Html.DropDownListFor(model => model.comp_id, Enumerable.Empty<SelectListItem>(), "", new { @class = "", @disabled = true, @data_selected = Model.comp_id })
                            </div>
                        </div>
                        <div class="col-md-12 margin-top-default">
                            <div class="no-padding col-md-12 fs20 ff-nt2">
                                @Html.LabelFor(model => model.role_id, new { @class = "" })
                            </div>
                            <div class="col-md-12 no-padding">
                                @Html.TextBoxFor(model => model.role_id, new { @maxlength = "20", @class = "input-default h45 fs20 block", @disabled = true })
                            </div>
                        </div>
                        <div class="col-md-12 margin-top-default">
                            <div class="no-padding col-md-12 fs20 ff-nt2">
                                @Html.LabelFor(model => model.name1, new { @class = "" })
                            </div>
                            <div class="col-md-12 no-padding">
                                @Html.TextBoxFor(model => model.name1, new { @maxlength = "20", @class = "input-default h45 fs20 block", @disabled = true })
                            </div>
                        </div>
                        <div class="col-md-12 margin-top-default">
                            <div class="no-padding col-md-12 fs20 ff-nt2">
                                @Html.LabelFor(model => model.description, new { @class = "" })
                            </div>
                            <div class="col-md-12 no-padding">
                                @Html.TextAreaFor(model => model.description, new { @maxlength = "250", @class = "input-default fs20 block", @placeholder = "Notes", @rows = 5, @disabled = true })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 pull-right margin-top-lg ">
                        <div class="col-md-12">
                                <a type="button" href='@Url.Content("~/Roles")' class="bg-orange001 button-default block h38 fs20 ff-nt2">CLOSE</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>

    $(document).ready(function () {
        initializeUI();
        initializeEvents()
    });

    function initializeUI() {
        $('#comp_id').selectize({
            valueField: 'KEY',
            labelField: 'VALUE',
            searchField: ['VALUE'],
            sortField: [{ field: 'VALUE', direction: 'asc' }],
            dropdownParent: 'body',
            onInitialize: function () {
                __this = this;
                __this.load(function (callback) {
                    $.ajax({
                        url: '@Url.Content("~/LookUp/AllowedFieldsPerUser")',
                        method: 'get',
                        success: function (results) {
                            callback(results);
                        },
                        error: function () {
                            callback();
                        }
                    });
                });
            },
            onBlur: function () {
                $(this.$input[0]).valid();
            },
            onLoad: function (data) {
                this.setValue($(this.$input[0]).data('selected'));
            }
        });
        
    }

    function initializeEvents() {

    }
</script>
