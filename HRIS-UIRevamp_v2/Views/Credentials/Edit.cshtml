@using HRIS_UIRevamp_v2.ViewModel
@model UserCredentialsUpdateViewModel
@{
    ViewBag.Title = "Credentials/Edit";
}
<div class="col-md-12 title">
    UPDATE CREDENTIALS
</div>

@using (Html.BeginForm("Update", "Credentials", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "credFrm" }))
{
    @Html.AntiForgeryToken()

    <div class="body-content">
        <div class="col-md-6 no-padding left-container">
            <div class="col-md-12 no-padding tabs-default h55 ff-nt2 margin-bottom-default">
                <div class="tab selected flex flex-left">
                    <span class="margin-left-lg fs26">ACCOUNT</span>
                </div>
            </div>

            <div class="col-md-12">
                <div class="col-md-12 h45 no-padding-right flex flex-left fs20 ff-nt2">
                    @Html.LabelFor(model => model.user_id, new { @class = "" })
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.user_id, new { @maxlength = "20", @class = "input-default h45 fs20 block", @autocomplete = "off" ,@disabled = true })
                    @Html.HiddenFor(model => model.user_id, new { @readonly = true })
                </div>
            </div>


            <div class="col-md-12 margin-top-default">
                <div class="col-md-12 fs20 ff-nt2 margin-bottom-sm">
                    Full Name
                </div>
                <div class="col-md-12 no-padding margin-bottom-default">
                    <div class="col-md-6 no-padding-right ">
                        <div class="col-md-12 fs17 no-padding">
                            Firstname
                        </div>
                        @Html.TextBoxFor(model => model.fname, new { @maxlength = "20", @class = "input-default h45 fs20 block", @autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.fname, "", new { @class = "fs15 text-danger" })
                    </div>

                    <div class="col-md-6">
                        <div class="col-md-12 fs17 no-padding">
                            Middlename
                        </div>
                        @Html.TextBoxFor(model => model.mname, new { @maxlength = "20", @class = "input-default h45 fs20 block", @autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.mname, "", new { @class = "fs15 text-danger" })
                    </div>
                </div>

                <div class="col-md-12 margin-bottom-sm no-padding">
                    <div class="col-md-6 margin-bottom-default no-padding-right ">
                        <div class="col-md-12 fs17 no-padding">
                            Lastname
                        </div>
                        @Html.TextBoxFor(model => model.lname, new { @maxlength = "20", @class = "input-default h45 fs20 block", @autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.lname, "", new { @class = "fs15 text-danger" })
                    </div>

                    <div class="col-md-6 margin-bottom-default ">
                        <div class="col-md-12 fs17 no-padding">
                            Suffix
                        </div>
                        @Html.TextBoxFor(model => model.suffix, new { @maxlength = "20", @class = "input-default h45 fs20 block", @autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.suffix, "", new { @class = "fs15 text-danger" })
                    </div>
                </div>
                
            </div>

            <div class="col-md-12 no-padding tabs-default h55 ff-nt2 margin-bottom-lg">
                <div class="tab selected flex flex-left">
                    <span class="margin-left-lg fs26">CONFIGURATION</span>
                </div>
            </div>

            <div class="col-md-12">
                <div class="col-md-3 h45 no-padding-right flex flex-left fs20 ff-nt2">
                    @Html.LabelFor(model => model.profile_id, new { @class = "" })
                </div>
                <div class="col-md-9 no-padding-left">
                    @Html.DropDownListFor(model => model.profile_id, Enumerable.Empty<SelectListItem>(), "", new { @class = "", @placeholder = "Select Profile/s", @data_selected = Model.profile_id })
                    @Html.ValidationMessageFor(model => model.profile_id, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-12 margin-top-default margin-bottom-lg">
                <div class="col-md-3 h45 no-padding-right flex flex-left fs20 ff-nt2">
                    @Html.LabelFor(model => model.c_role_id, new { @class = "" })
                </div>
                <div class="col-md-9 no-padding-left">
                    @Html.DropDownListFor(model => model.c_role_id, Enumerable.Empty<SelectListItem>(), "", new { @class = "", @placeholder = "Select Role" , @data_selected = Model.c_role_id })
                    @Html.ValidationMessageFor(model => model.c_role_id, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-6 no-padding">
            <div class="col-md-12 no-padding tabs-default h55 ff-nt2">
                <div class="tab selected flex flex-left">
                    <span class="margin-left-lg fs26">BASIC INFORMATION</span>
                </div>
            </div>

            <div class="col-md-12 margin-top-lg">
                <div class="col-md-12 fs20 ff-nt2 margin-bottom-sm">
                    Emails
                </div>
                <div class="col-md-12 margin-top-default">
                    <div class="no-padding col-md-1 h45 fs20 ff-nt2 margin-bottom-sm flex flex-center">
                        1.
                    </div>
                    <div class="col-md-11 no-padding">
                        @Html.TextBoxFor(model => model.email1, new { @maxlength = "20", @class = "input-default h45 fs20 block" })
                        @Html.ValidationMessageFor(model => model.email1, "", new { @class = "fs15 text-danger" })
                    </div>
                </div>
                <div class="col-md-12 margin-top-default">
                    <div class="no-padding col-md-1 h45 fs20 ff-nt2 margin-bottom-sm flex flex-center">
                        2.
                    </div>
                    <div class="col-md-11 no-padding">
                        @Html.TextBoxFor(model => model.email2, new { @maxlength = "20", @class = "input-default h45 fs20 block" })
                        @Html.ValidationMessageFor(model => model.email2, "", new { @class = "fs15 text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-12 margin-top-default">
                <div class="col-md-12 fs20 ff-nt2 margin-bottom-sm">
                    Phone Numbers
                </div>
                <div class="col-md-12 margin-top-default">
                    <div class="no-padding col-md-1 h45 fs20 ff-nt2 margin-bottom-sm flex flex-center">
                        1.
                    </div>
                    <div class="col-md-11 no-padding">
                        @Html.TextBoxFor(model => model.phone1, new { @maxlength = "20", @class = "input-default h45 fs20 block" })
                        @Html.ValidationMessageFor(model => model.phone1, "", new { @class = "fs15 text-danger" })
                    </div>
                </div>
                <div class="col-md-12 margin-top-default">
                    <div class="no-padding col-md-1 h45 fs20 ff-nt2 margin-bottom-sm flex flex-center">
                        2.
                    </div>
                    <div class="col-md-11 no-padding">
                        @Html.TextBoxFor(model => model.phone2, new { @maxlength = "20", @class = "input-default h45 fs20 block" })
                        @Html.ValidationMessageFor(model => model.phone2, "", new { @class = "fs15 text-danger" })
                    </div>
                </div>
            </div>





            <div class="col-md-12 margin-top-default margin-bottom-default">
                <div class="col-md-6 pull-right margin-top-lg margin-right-default flex flex-center no-padding-right">
                    <div class="col-md-5 no-padding pull-right margin-right-sm">
                        <input type="button" value="UPDATE" id="submit" class="bg-green002 button-default block h38 fs20 ff-nt2" />
                    </div>
                    <div class="no-padding col-md-7">
                        <input type="button" value="CANCEL" data-target="@Url.Content("~/Credentials/Index")" class="checkChanges bg-orange001 button-default block h38 fs20 ff-nt2" />
                    </div>
                </div>
            </div>
        </div>

    </div>
}
<script>

    $(document).ready(function () {
        initializeUI();
        initializeEvents()
    });

    function initializeUI() {
        $('#profile_id').selectize({
            valueField: 'profile_id',
            labelField: 'name1',
            searchField: ['name1'],
            sortField: [{ field: 'name1', direction: 'asc' }],
            dropdownParent: 'body',
            onInitialize: function () {
                __this = this;
                __this.load(function (callback) {
                    $.ajax({
                        url: '@Url.Content("~/LookUp/selectProfileCredentials")',
                        method: 'get',
                        success: function (results) {
                            callback(results);
                        },
                        error: function () {
                            callback();
                        }
                    });
                });
            },
            onBlur: function () {
                $(this.$input[0]).valid();
            },
            onLoad: function () {
                this.setValue($(this.$input[0]).data('selected'));
            }
        });

        $('#c_role_id').selectize({
            valueField: 'c_role_id',
            labelField: 'name1',
            searchField: ['name1'],
            sortField: [{ field: 'name1', direction: 'asc' }],
            dropdownParent: 'body',
            onInitialize: function () {
                __this = this;
                __this.load(function (callback) {
                    $.ajax({
                        url: '@Url.Content("~/LookUp/selectRoleCredentials")',
                        method: 'get',
                        success: function (results) {
                            callback(results);
                        },
                        error: function () {
                            callback();
                        }
                    });
                });
            },
            onBlur: function () {
                $(this.$input[0]).valid();
            },
            onLoad: function () {
                this.setValue($(this.$input[0]).data('selected'));
            }
        });


    }

    function initializeEvents() {

        $('#submit').on('click', function (e) {
            var _this = $('#credFrm');
            if (_this.valid()) {
                bootbox.confirm({
                    size: "small",
                    message: "Update Credentials?",
                    closeButton: false,
                    buttons: {
                        cancel: {
                            label: "NO",
                            className: "bg-orange001 text-white"
                        },
                        confirm: {
                            label: "YES",
                            className: "bg-green002 text-white"
                        }

                    },
                    className: "fs17 ff-nt2",
                    callback: function (result) {
                        if (result) {
                            var model = submitForm();
                            $.ajax({
                                url: "@Url.Content("~/Credentials/Update")",
                                method: 'post',
                            dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify({ data: model }),
                            success: function (results) {
                                if (!results) {
                                    bootbox.alert({
                                        size: "small",
                                        message: "Error!",
                                        closeButton: false,
                                        className: "fs17 ff-nt2",
                                        buttons: {
                                            ok:
                                            {
                                                className: "bg-green002 text-white"
                                            }
                                        }

                                    });
                                }
                                else {
                                    bootbox.alert({
                                        size: "small",
                                        message: "Successfully Saved!",
                                        closeButton: false,
                                        className: "fs17 ff-nt2",
                                        buttons: {
                                            ok:
                                            {
                                                className: "bg-green002 text-white"
                                            }
                                        },
                                        callback: function (result) {
                                            window.location.href = '@Url.Content("~/Credentials/Index")';
                                        }
                                    });
                                }
                            }
                        });
                    }
                }
                });
        }
        });
    }

    function submitForm() {
        var serial = $('#credFrm').serializeArray();
        credentials = {};
        for (var x in serial) {
            credentials[serial[x].name] = serial[x].value;
        }
        return credentials;
    }
</script>
